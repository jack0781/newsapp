{"ast":null,"code":"import axios from '../axios';\nimport { SET_NEWS_LOADING, SET_SOURCE_LOADING, GET_NEWS_SOURCE, NEWS_SOURCE_ERROR, CHANGE_THEME, SET_THEME, TOP_NEWS_ERROR, SET_TOP_NEWS, CLEAR_TOP_NEWS } from './types';\nlet newsApiKey;\n\nif (process.env.NODE_ENV !== 'production') {\n  newsApiKey = process.env.REACT_APP_NEWS_API_KEY;\n} else {\n  newsApiKey = process.env.NEWS_API_KEY;\n} // Set Theme\n\n\nexport const setTheme = () => {\n  let localTheme = localStorage.getItem('theme');\n\n  if (localTheme === undefined || localTheme === null) {\n    localTheme = 'dark';\n    document.body.style.backgroundColor = '#ccc';\n    localStorage.setItem('theme', localTheme);\n  }\n\n  if (localTheme === 'dark') {\n    document.body.style.backgroundColor = '#ccc';\n  } else {\n    document.body.style.backgroundColor = '#fff';\n  }\n\n  return {\n    type: SET_THEME,\n    payload: localTheme\n  };\n}; // Change theme\n\nexport const changeTheme = theme => {\n  localStorage.setItem('theme', theme);\n\n  if (theme === 'dark') {\n    document.body.style.backgroundColor = '#ccc';\n  } else {\n    document.body.style.backgroundColor = '#fff';\n  }\n\n  return {\n    type: CHANGE_THEME,\n    payload: theme\n  };\n}; // Set Source loading\n\nexport const setSourceLoading = () => {\n  return {\n    type: SET_SOURCE_LOADING\n  };\n}; // Set News Loading\n\nexport const setNewsLoading = () => {\n  return {\n    type: SET_NEWS_LOADING\n  };\n}; // Get News Source\n\nexport const getNewsSource = () => async dispatch => {\n  dispatch(setSourceLoading());\n\n  try {\n    const newsSource = await axios.get(`sources?apiKey=${newsApiKey}`);\n\n    if (newsSource) {\n      dispatch({\n        type: GET_NEWS_SOURCE,\n        payload: newsSource.data.sources\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: NEWS_SOURCE_ERROR\n    });\n  }\n}; // Set Top News\n\nexport const setTopNews = (url, page) => async (dispatch, getState) => {\n  dispatch(setNewsLoading());\n\n  try {\n    if (page === 1) {\n      dispatch({\n        type: CLEAR_TOP_NEWS\n      });\n    }\n\n    const {\n      pageSize\n    } = getState().news;\n    const newsItems = await axios.get(`${url}&apiKey=${newsApiKey}&page=${page}&pageSize=${pageSize}`);\n\n    if (newsItems) {\n      dispatch({\n        type: SET_TOP_NEWS,\n        payload: newsItems.data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: TOP_NEWS_ERROR\n    });\n  }\n}; //  Clear top news\n\nexport const clearTopNews = () => {\n  return {\n    type: CLEAR_TOP_NEWS\n  };\n};","map":{"version":3,"sources":["E:/MERN/react-news-search-and-bookmark-master/src/actions/news.js"],"names":["axios","SET_NEWS_LOADING","SET_SOURCE_LOADING","GET_NEWS_SOURCE","NEWS_SOURCE_ERROR","CHANGE_THEME","SET_THEME","TOP_NEWS_ERROR","SET_TOP_NEWS","CLEAR_TOP_NEWS","newsApiKey","process","env","NODE_ENV","REACT_APP_NEWS_API_KEY","NEWS_API_KEY","setTheme","localTheme","localStorage","getItem","undefined","document","body","style","backgroundColor","setItem","type","payload","changeTheme","theme","setSourceLoading","setNewsLoading","getNewsSource","dispatch","newsSource","get","data","sources","error","setTopNews","url","page","getState","pageSize","news","newsItems","clearTopNews"],"mappings":"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","sourcesContent":["import axios from '../axios';\nimport {\n  SET_NEWS_LOADING,\n  SET_SOURCE_LOADING,\n  GET_NEWS_SOURCE,\n  NEWS_SOURCE_ERROR,\n  CHANGE_THEME,\n  SET_THEME,\n  TOP_NEWS_ERROR,\n  SET_TOP_NEWS,\n  CLEAR_TOP_NEWS\n} from './types';\n\nlet newsApiKey;\n\nif (process.env.NODE_ENV !== 'production') {\n  newsApiKey = process.env.REACT_APP_NEWS_API_KEY;\n} else {\n  newsApiKey = process.env.NEWS_API_KEY;\n}\n\n// Set Theme\nexport const setTheme = () => {\n  let localTheme = localStorage.getItem('theme');\n\n  if (localTheme === undefined || localTheme === null) {\n    localTheme = 'dark';\n    document.body.style.backgroundColor = '#ccc';\n    localStorage.setItem('theme', localTheme);\n  }\n\n  if (localTheme === 'dark') {\n    document.body.style.backgroundColor = '#ccc';\n  } else {\n    document.body.style.backgroundColor = '#fff';\n  }\n  return {\n    type: SET_THEME,\n    payload: localTheme\n  };\n};\n\n// Change theme\nexport const changeTheme = theme => {\n  localStorage.setItem('theme', theme);\n  if (theme === 'dark') {\n    document.body.style.backgroundColor = '#ccc';\n  } else {\n    document.body.style.backgroundColor = '#fff';\n  }\n  return {\n    type: CHANGE_THEME,\n    payload: theme\n  };\n};\n\n// Set Source loading\nexport const setSourceLoading = () => {\n  return {\n    type: SET_SOURCE_LOADING\n  };\n};\n\n// Set News Loading\nexport const setNewsLoading = () => {\n  return {\n    type: SET_NEWS_LOADING\n  };\n};\n\n// Get News Source\nexport const getNewsSource = () => async dispatch => {\n  dispatch(setSourceLoading());\n  try {\n    const newsSource = await axios.get(`sources?apiKey=${newsApiKey}`);\n    if (newsSource) {\n      dispatch({\n        type: GET_NEWS_SOURCE,\n        payload: newsSource.data.sources\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: NEWS_SOURCE_ERROR\n    });\n  }\n};\n\n// Set Top News\nexport const setTopNews = (url, page) => async (dispatch, getState) => {\n  dispatch(setNewsLoading());\n\n  try {\n    if (page === 1) {\n      dispatch({ type: CLEAR_TOP_NEWS });\n    }\n    const { pageSize } = getState().news;\n    const newsItems = await axios.get(\n      `${url}&apiKey=${newsApiKey}&page=${page}&pageSize=${pageSize}`\n    );\n    if (newsItems) {\n      dispatch({\n        type: SET_TOP_NEWS,\n        payload: newsItems.data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: TOP_NEWS_ERROR\n    });\n  }\n};\n\n//  Clear top news\nexport const clearTopNews = () => {\n  return {\n    type: CLEAR_TOP_NEWS\n  };\n};\n"]},"metadata":{},"sourceType":"module"}